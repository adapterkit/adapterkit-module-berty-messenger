// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: messenger.proto

package messenger

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessengerSvcClient is the client API for MessengerSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessengerSvcClient interface {
	GetContactPubkey(ctx context.Context, in *GetContactPubkeyReq, opts ...grpc.CallOption) (*GetContactPubkeyRes, error)
	GetContactRequests(ctx context.Context, in *GetContactRequestsReq, opts ...grpc.CallOption) (*GetContactRequestsRes, error)
	SendContactRequest(ctx context.Context, in *SendContactRequestReq, opts ...grpc.CallOption) (*SendContactRequestRes, error)
	AcceptContactRequest(ctx context.Context, in *AcceptContactRequestReq, opts ...grpc.CallOption) (*AcceptContactRequestRes, error)
	SendMessage(ctx context.Context, in *SendMessageReq, opts ...grpc.CallOption) (*SendMessageRes, error)
	ListMessages(ctx context.Context, in *ListMessagesReq, opts ...grpc.CallOption) (MessengerSvc_ListMessagesClient, error)
}

type messengerSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewMessengerSvcClient(cc grpc.ClientConnInterface) MessengerSvcClient {
	return &messengerSvcClient{cc}
}

func (c *messengerSvcClient) GetContactPubkey(ctx context.Context, in *GetContactPubkeyReq, opts ...grpc.CallOption) (*GetContactPubkeyRes, error) {
	out := new(GetContactPubkeyRes)
	err := c.cc.Invoke(ctx, "/MessengerSvc/GetContactPubkey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messengerSvcClient) GetContactRequests(ctx context.Context, in *GetContactRequestsReq, opts ...grpc.CallOption) (*GetContactRequestsRes, error) {
	out := new(GetContactRequestsRes)
	err := c.cc.Invoke(ctx, "/MessengerSvc/GetContactRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messengerSvcClient) SendContactRequest(ctx context.Context, in *SendContactRequestReq, opts ...grpc.CallOption) (*SendContactRequestRes, error) {
	out := new(SendContactRequestRes)
	err := c.cc.Invoke(ctx, "/MessengerSvc/SendContactRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messengerSvcClient) AcceptContactRequest(ctx context.Context, in *AcceptContactRequestReq, opts ...grpc.CallOption) (*AcceptContactRequestRes, error) {
	out := new(AcceptContactRequestRes)
	err := c.cc.Invoke(ctx, "/MessengerSvc/AcceptContactRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messengerSvcClient) SendMessage(ctx context.Context, in *SendMessageReq, opts ...grpc.CallOption) (*SendMessageRes, error) {
	out := new(SendMessageRes)
	err := c.cc.Invoke(ctx, "/MessengerSvc/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messengerSvcClient) ListMessages(ctx context.Context, in *ListMessagesReq, opts ...grpc.CallOption) (MessengerSvc_ListMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessengerSvc_ServiceDesc.Streams[0], "/MessengerSvc/ListMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &messengerSvcListMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessengerSvc_ListMessagesClient interface {
	Recv() (*ListMessagesRes, error)
	grpc.ClientStream
}

type messengerSvcListMessagesClient struct {
	grpc.ClientStream
}

func (x *messengerSvcListMessagesClient) Recv() (*ListMessagesRes, error) {
	m := new(ListMessagesRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessengerSvcServer is the server API for MessengerSvc service.
// All implementations must embed UnimplementedMessengerSvcServer
// for forward compatibility
type MessengerSvcServer interface {
	GetContactPubkey(context.Context, *GetContactPubkeyReq) (*GetContactPubkeyRes, error)
	GetContactRequests(context.Context, *GetContactRequestsReq) (*GetContactRequestsRes, error)
	SendContactRequest(context.Context, *SendContactRequestReq) (*SendContactRequestRes, error)
	AcceptContactRequest(context.Context, *AcceptContactRequestReq) (*AcceptContactRequestRes, error)
	SendMessage(context.Context, *SendMessageReq) (*SendMessageRes, error)
	ListMessages(*ListMessagesReq, MessengerSvc_ListMessagesServer) error
	mustEmbedUnimplementedMessengerSvcServer()
}

// UnimplementedMessengerSvcServer must be embedded to have forward compatible implementations.
type UnimplementedMessengerSvcServer struct {
}

func (UnimplementedMessengerSvcServer) GetContactPubkey(context.Context, *GetContactPubkeyReq) (*GetContactPubkeyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContactPubkey not implemented")
}
func (UnimplementedMessengerSvcServer) GetContactRequests(context.Context, *GetContactRequestsReq) (*GetContactRequestsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContactRequests not implemented")
}
func (UnimplementedMessengerSvcServer) SendContactRequest(context.Context, *SendContactRequestReq) (*SendContactRequestRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendContactRequest not implemented")
}
func (UnimplementedMessengerSvcServer) AcceptContactRequest(context.Context, *AcceptContactRequestReq) (*AcceptContactRequestRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptContactRequest not implemented")
}
func (UnimplementedMessengerSvcServer) SendMessage(context.Context, *SendMessageReq) (*SendMessageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedMessengerSvcServer) ListMessages(*ListMessagesReq, MessengerSvc_ListMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListMessages not implemented")
}
func (UnimplementedMessengerSvcServer) mustEmbedUnimplementedMessengerSvcServer() {}

// UnsafeMessengerSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessengerSvcServer will
// result in compilation errors.
type UnsafeMessengerSvcServer interface {
	mustEmbedUnimplementedMessengerSvcServer()
}

func RegisterMessengerSvcServer(s grpc.ServiceRegistrar, srv MessengerSvcServer) {
	s.RegisterService(&MessengerSvc_ServiceDesc, srv)
}

func _MessengerSvc_GetContactPubkey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactPubkeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessengerSvcServer).GetContactPubkey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MessengerSvc/GetContactPubkey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessengerSvcServer).GetContactPubkey(ctx, req.(*GetContactPubkeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessengerSvc_GetContactRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactRequestsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessengerSvcServer).GetContactRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MessengerSvc/GetContactRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessengerSvcServer).GetContactRequests(ctx, req.(*GetContactRequestsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessengerSvc_SendContactRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendContactRequestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessengerSvcServer).SendContactRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MessengerSvc/SendContactRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessengerSvcServer).SendContactRequest(ctx, req.(*SendContactRequestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessengerSvc_AcceptContactRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptContactRequestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessengerSvcServer).AcceptContactRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MessengerSvc/AcceptContactRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessengerSvcServer).AcceptContactRequest(ctx, req.(*AcceptContactRequestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessengerSvc_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessengerSvcServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MessengerSvc/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessengerSvcServer).SendMessage(ctx, req.(*SendMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessengerSvc_ListMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListMessagesReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessengerSvcServer).ListMessages(m, &messengerSvcListMessagesServer{stream})
}

type MessengerSvc_ListMessagesServer interface {
	Send(*ListMessagesRes) error
	grpc.ServerStream
}

type messengerSvcListMessagesServer struct {
	grpc.ServerStream
}

func (x *messengerSvcListMessagesServer) Send(m *ListMessagesRes) error {
	return x.ServerStream.SendMsg(m)
}

// MessengerSvc_ServiceDesc is the grpc.ServiceDesc for MessengerSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessengerSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MessengerSvc",
	HandlerType: (*MessengerSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetContactPubkey",
			Handler:    _MessengerSvc_GetContactPubkey_Handler,
		},
		{
			MethodName: "GetContactRequests",
			Handler:    _MessengerSvc_GetContactRequests_Handler,
		},
		{
			MethodName: "SendContactRequest",
			Handler:    _MessengerSvc_SendContactRequest_Handler,
		},
		{
			MethodName: "AcceptContactRequest",
			Handler:    _MessengerSvc_AcceptContactRequest_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _MessengerSvc_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListMessages",
			Handler:       _MessengerSvc_ListMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "messenger.proto",
}
