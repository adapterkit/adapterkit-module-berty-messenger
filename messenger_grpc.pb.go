// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: messenger.proto

package messenger

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessengerSvcClient is the client API for MessengerSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessengerSvcClient interface {
	GetInvitationLink(ctx context.Context, in *GetInvitationLinkReq, opts ...grpc.CallOption) (*GetInvitationLinkRes, error)
	GetContactRequests(ctx context.Context, in *GetContactRequestsReq, opts ...grpc.CallOption) (MessengerSvc_GetContactRequestsClient, error)
	AcceptContactRequest(ctx context.Context, in *AcceptContactRequestReq, opts ...grpc.CallOption) (*AcceptContactRequestRes, error)
}

type messengerSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewMessengerSvcClient(cc grpc.ClientConnInterface) MessengerSvcClient {
	return &messengerSvcClient{cc}
}

func (c *messengerSvcClient) GetInvitationLink(ctx context.Context, in *GetInvitationLinkReq, opts ...grpc.CallOption) (*GetInvitationLinkRes, error) {
	out := new(GetInvitationLinkRes)
	err := c.cc.Invoke(ctx, "/MessengerSvc/GetInvitationLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messengerSvcClient) GetContactRequests(ctx context.Context, in *GetContactRequestsReq, opts ...grpc.CallOption) (MessengerSvc_GetContactRequestsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessengerSvc_ServiceDesc.Streams[0], "/MessengerSvc/GetContactRequests", opts...)
	if err != nil {
		return nil, err
	}
	x := &messengerSvcGetContactRequestsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessengerSvc_GetContactRequestsClient interface {
	Recv() (*GetContactRequestsRes, error)
	grpc.ClientStream
}

type messengerSvcGetContactRequestsClient struct {
	grpc.ClientStream
}

func (x *messengerSvcGetContactRequestsClient) Recv() (*GetContactRequestsRes, error) {
	m := new(GetContactRequestsRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messengerSvcClient) AcceptContactRequest(ctx context.Context, in *AcceptContactRequestReq, opts ...grpc.CallOption) (*AcceptContactRequestRes, error) {
	out := new(AcceptContactRequestRes)
	err := c.cc.Invoke(ctx, "/MessengerSvc/AcceptContactRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessengerSvcServer is the server API for MessengerSvc service.
// All implementations must embed UnimplementedMessengerSvcServer
// for forward compatibility
type MessengerSvcServer interface {
	GetInvitationLink(context.Context, *GetInvitationLinkReq) (*GetInvitationLinkRes, error)
	GetContactRequests(*GetContactRequestsReq, MessengerSvc_GetContactRequestsServer) error
	AcceptContactRequest(context.Context, *AcceptContactRequestReq) (*AcceptContactRequestRes, error)
	mustEmbedUnimplementedMessengerSvcServer()
}

// UnimplementedMessengerSvcServer must be embedded to have forward compatible implementations.
type UnimplementedMessengerSvcServer struct {
}

func (UnimplementedMessengerSvcServer) GetInvitationLink(context.Context, *GetInvitationLinkReq) (*GetInvitationLinkRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvitationLink not implemented")
}
func (UnimplementedMessengerSvcServer) GetContactRequests(*GetContactRequestsReq, MessengerSvc_GetContactRequestsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetContactRequests not implemented")
}
func (UnimplementedMessengerSvcServer) AcceptContactRequest(context.Context, *AcceptContactRequestReq) (*AcceptContactRequestRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptContactRequest not implemented")
}
func (UnimplementedMessengerSvcServer) mustEmbedUnimplementedMessengerSvcServer() {}

// UnsafeMessengerSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessengerSvcServer will
// result in compilation errors.
type UnsafeMessengerSvcServer interface {
	mustEmbedUnimplementedMessengerSvcServer()
}

func RegisterMessengerSvcServer(s grpc.ServiceRegistrar, srv MessengerSvcServer) {
	s.RegisterService(&MessengerSvc_ServiceDesc, srv)
}

func _MessengerSvc_GetInvitationLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvitationLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessengerSvcServer).GetInvitationLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MessengerSvc/GetInvitationLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessengerSvcServer).GetInvitationLink(ctx, req.(*GetInvitationLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessengerSvc_GetContactRequests_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetContactRequestsReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessengerSvcServer).GetContactRequests(m, &messengerSvcGetContactRequestsServer{stream})
}

type MessengerSvc_GetContactRequestsServer interface {
	Send(*GetContactRequestsRes) error
	grpc.ServerStream
}

type messengerSvcGetContactRequestsServer struct {
	grpc.ServerStream
}

func (x *messengerSvcGetContactRequestsServer) Send(m *GetContactRequestsRes) error {
	return x.ServerStream.SendMsg(m)
}

func _MessengerSvc_AcceptContactRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptContactRequestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessengerSvcServer).AcceptContactRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MessengerSvc/AcceptContactRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessengerSvcServer).AcceptContactRequest(ctx, req.(*AcceptContactRequestReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MessengerSvc_ServiceDesc is the grpc.ServiceDesc for MessengerSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessengerSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MessengerSvc",
	HandlerType: (*MessengerSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInvitationLink",
			Handler:    _MessengerSvc_GetInvitationLink_Handler,
		},
		{
			MethodName: "AcceptContactRequest",
			Handler:    _MessengerSvc_AcceptContactRequest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetContactRequests",
			Handler:       _MessengerSvc_GetContactRequests_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "messenger.proto",
}
